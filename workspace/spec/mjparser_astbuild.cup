
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol curr_token) {
		report_error("\nSintaksna greska", curr_token);
	}
	
	public void unrecovered_syntax_error(Symbol curr_token) throws java.lang.Exception {
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", curr_token);
	}
	
	public void report_error(String message, Object info) {
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.error(msg.toString());
	}

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN;
terminal DOUBLEMINUS, DOUBLECOLON, READ, NEW, MUL, COMMA, DOUBLEPLUS;
terminal PLUS, VOID, PRINT, CHARACTER, BOOLEAN, DIV, MINUS, PERCENT;
terminal LBRACKET, CONST, RBRACKET, NAMESPACE;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal Program Program;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal Type Type;
nonterminal MethodDecl MethodDecl;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Mulop Mulop;
nonterminal DeclList DeclList;
nonterminal Initializator Initializator;
nonterminal SimpleDesignator SimpleDesignator;
nonterminal ArrayDesignator ArrayDesignator;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Addop Addop;
nonterminal Factor Factor;
nonterminal Identifier Identifier;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstIdentifier ConstIdentifier;
nonterminal ProgNameDeclList ProgNameDeclList;
nonterminal NamespaceDecl NamespaceDecl;

Program ::= PROG IDENT:I1 ProgNameDeclList:P2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new ProgramDerived1(I1, P2, M3); RESULT.setLine(I1left); :};

ProgNameDeclList ::= ProgNameDeclList:P1 NamespaceDecl:N2 {: RESULT=new ProgNameDeclListDerived1(P1, N2); RESULT.setLine(P1left); :}
					| ProgNameDeclList:P1 VarDecl:V2 {: RESULT=new ProgNameDeclListDerived2(P1, V2); RESULT.setLine(P1left); :}
					| {: RESULT=new ProgNameDeclListDerived3(); :} /* epsilon */;

NamespaceDecl ::= NAMESPACE IDENT:I1 LBRACE VarDeclList:V2 LBRACE RBRACE RBRACE {: RESULT=new NamespaceDeclDerived1(I1, V2); RESULT.setLine(I1left); :};

VarDeclList ::= VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListDerived1(V1, V2); RESULT.setLine(V1left); :}
			| {: RESULT=new VarDeclListDerived2(); :} /* epsilon */;

VarDecl ::= (VarDeclaration) Type:varType DeclList:D1 SEMI {: RESULT=new VarDeclaration(varType, D1); RESULT.setLine(varTypeleft); :}
		| (ConstVarDeclaration) CONST Type:varType ConstDeclList:C1 SEMI {: RESULT=new ConstVarDeclaration(varType, C1); RESULT.setLine(varTypeleft); :}
		| error SEMI:l
		{:
			parser.report_error(
				"Izvrsen oporavak do ; u deklaraciji promenljivih na liniji "
				+ lleft, null
			);
		:} {: RESULT=new VarDeclDerived1(); :};

DeclList ::= Identifier:I1 COMMA DeclList:D2 {: RESULT=new DeclListDerived1(I1, D2); RESULT.setLine(I1left); :}
			| Identifier:I1 {: RESULT=new DeclListDerived2(I1); RESULT.setLine(I1left); :};

Identifier ::= IDENT:I1 {: RESULT=new IdentifierDerived1(I1); RESULT.setLine(I1left); :}
			| IDENT:I1 LBRACKET RBRACKET {: RESULT=new IdentifierDerived2(I1); RESULT.setLine(I1left); :}
			| IDENT:I1 EQUAL Initializator:I2 {: RESULT=new IdentifierDerived3(I1, I2); RESULT.setLine(I1left); :}
			| error
			{:
				parser.report_error(
					"Izvrsen oporavak do ,(|;) u deklaraciji promenljivih",
					null
				);
			:} {: RESULT=new IdentifierDerived4(); :};

ConstDeclList ::= ConstIdentifier:C1 COMMA ConstDeclList:C2 {: RESULT=new ConstDeclListDerived1(C1, C2); RESULT.setLine(C1left); :}
				| ConstIdentifier:C1 {: RESULT=new ConstDeclListDerived2(C1); RESULT.setLine(C1left); :};

ConstIdentifier ::= IDENT:I1 EQUAL Initializator:I2 {: RESULT=new ConstIdentifierDerived1(I1, I2); RESULT.setLine(I1left); :}
				| error
				{:
					parser.report_error(
						"Izvrsen oporavak do ,(|;) u deklaraciji promenljivih",
						null
					);
				:} {: RESULT=new ConstIdentifierDerived2(); :};
			
Initializator ::= NUMBER:N1 {: RESULT=new InitializatorDerived1(N1); RESULT.setLine(N1left); :} | CHARACTER {: RESULT=new InitializatorDerived2(); :} | BOOLEAN {: RESULT=new InitializatorDerived3(); :};

Type ::= IDENT:typeName {: RESULT=new TypeDerived1(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListDerived1(M1, M2); RESULT.setLine(M1left); :}
				| {: RESULT=new MethodDeclListDerived2(); :} /* epsilon */;

MethodDecl ::= VOID IDENT:I1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclDerived1(I1, V2, S3); RESULT.setLine(I1left); :};

StatementList ::= StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :}
				| {: RESULT=new StatementListDerived2(); :} /* epsilon */;

Statement ::= SimpleDesignator:S1 EQUAL Expr:e SEMI {: RESULT=new StatementDerived1(S1, e); RESULT.setLine(S1left); :}
			| SimpleDesignator:S1 EQUAL NEW Type:T2 LBRACKET Expr:E3 RBRACKET SEMI {: RESULT=new StatementDerived2(S1, T2, E3); RESULT.setLine(S1left); :}
			| ArrayDesignator:A1 EQUAL Expr:e SEMI {: RESULT=new StatementDerived3(A1, e); RESULT.setLine(A1left); :}
			| error SEMI:l
			{:
				parser.report_error(
					"Izvrsen oporavak do ; na liniji "
					+ lleft, null
				);
			:} {: RESULT=new StatementDerived4(); :}
			| SimpleDesignator:S1 DOUBLEPLUS SEMI {: RESULT=new StatementDerived5(S1); RESULT.setLine(S1left); :}
			| ArrayDesignator:A1 DOUBLEPLUS SEMI {: RESULT=new StatementDerived6(A1); RESULT.setLine(A1left); :}
			| SimpleDesignator:S1 DOUBLEMINUS SEMI {: RESULT=new StatementDerived7(S1); RESULT.setLine(S1left); :}
			| ArrayDesignator:A1 DOUBLEMINUS SEMI {: RESULT=new StatementDerived8(A1); RESULT.setLine(A1left); :}
			| READ LPAREN SimpleDesignator:S1 RPAREN SEMI {: RESULT=new StatementDerived9(S1); RESULT.setLine(S1left); :}
			| READ LPAREN ArrayDesignator:A1 RPAREN SEMI {: RESULT=new StatementDerived10(A1); RESULT.setLine(A1left); :}
			| (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
			| (PrintOnWith) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintOnWith(E1, N2); RESULT.setLine(E1left); :}
			| RETURN SEMI {: RESULT=new StatementDerived11(); :};

Expr ::= Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprDerived1(E1, A2, T3); RESULT.setLine(E1left); :}
		| MINUS Term:T1 {: RESULT=new ExprDerived2(T1); RESULT.setLine(T1left); :}
		| Term:T1 {: RESULT=new ExprDerived3(T1); RESULT.setLine(T1left); :};

Term ::= Term:t Mulop:M1 Factor:te {: RESULT=new TermDerived1(t, M1, te); RESULT.setLine(tleft); :}
		| Factor:t {: RESULT=new TermDerived2(t); RESULT.setLine(tleft); :};

Factor ::= NUMBER:N1 {: RESULT=new FactorDerived1(N1); RESULT.setLine(N1left); :}
		| CHARACTER {: RESULT=new FactorDerived2(); :}
		| BOOLEAN {: RESULT=new FactorDerived3(); :}
		| LPAREN Expr:E1 RPAREN {: RESULT=new FactorDerived4(E1); RESULT.setLine(E1left); :}
		| SimpleDesignator:d {: RESULT=new FactorDerived5(d); RESULT.setLine(dleft); :}
		| ArrayDesignator:d {: RESULT=new FactorDerived6(d); RESULT.setLine(dleft); :};

SimpleDesignator ::= IDENT:name {: RESULT=new SimpleDesignatorDerived1(name); RESULT.setLine(nameleft); :}
					| IDENT:namesp DOUBLECOLON IDENT:name {: RESULT=new SimpleDesignatorDerived2(namesp, name); RESULT.setLine(namespleft); :};

ArrayDesignator ::= IDENT:name LBRACKET Expr:E1 RBRACKET {: RESULT=new ArrayDesignatorDerived1(name, E1); RESULT.setLine(nameleft); :}
				| IDENT:namesp DOUBLECOLON IDENT:name LBRACKET Expr:E1 RBRACKET {: RESULT=new ArrayDesignatorDerived2(namesp, name, E1); RESULT.setLine(namespleft); :};

Mulop ::= MUL {: RESULT=new MulopDerived1(); :} | DIV {: RESULT=new MulopDerived2(); :} | PERCENT {: RESULT=new MulopDerived3(); :};

Addop ::= PLUS {: RESULT=new AddopDerived1(); :} | MINUS {: RESULT=new AddopDerived2(); :};