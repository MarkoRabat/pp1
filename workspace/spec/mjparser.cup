
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol curr_token) {
		report_error("\nSintaksna greska", curr_token);
	}
	
	public void unrecovered_syntax_error(Symbol curr_token) throws java.lang.Exception {
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", curr_token);
	}
	
	public void report_error(String message, Object info) {
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
			msg.append(" na liniji ").append(((Symbol)info).left);
		log.error(msg.toString());
	}

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN;
terminal DOUBLEMINUS, DOUBLECOLON, READ, NEW, MUL, COMMA, DOUBLEPLUS;
terminal PLUS, VOID, PRINT, CHARACTER, BOOLEAN, DIV, MINUS, PERCENT;
terminal LBRACKET, CONST, RBRACKET, NAMESPACE;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal VarDeclList, MethodDeclList, VarDecl;
nonterminal StatementList, Statement, Mulop, DeclList, Initializator;
nonterminal Expr, Term, Addop, Factor;
nonterminal Identifier, ConstDeclList, ConstIdentifier, ProgNameDeclList;
nonterminal NamespaceDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, SimpleDesignator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodDecl, MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ArrayDesignator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

Program ::= (Prog) PROG ProgName:p ProgNameDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

ProgNameDeclList ::= ProgNameDeclList NamespaceDecl
					| ProgNameDeclList VarDecl
					| /* epsilon */;

NamespaceDecl ::= NAMESPACE IDENT LBRACE VarDeclList LBRACE RBRACE RBRACE;

VarDeclList ::= VarDeclList VarDecl
			| /* epsilon */;

VarDecl ::= (DeclListType) Type:varType DeclList SEMI
		| (ConstDeclListType) CONST Type:varType ConstDeclList SEMI
		| error SEMI:l
		{:
			parser.report_error(
				"Izvrsen oporavak do ; u deklaraciji promenljivih na liniji "
				+ lleft, null
			);
		:};

DeclList ::= Identifier COMMA DeclList
			| Identifier;

Identifier ::= IDENT
			| IDENT LBRACKET RBRACKET
			| IDENT EQUAL Initializator
			| error
			{:
				parser.report_error(
					"Izvrsen oporavak do ,(|;) u deklaraciji promenljivih",
					null
				);
			:};

ConstDeclList ::= ConstIdentifier COMMA ConstDeclList
				| ConstIdentifier;

ConstIdentifier ::= IDENT EQUAL Initializator
				| error
				{:
					parser.report_error(
						"Izvrsen oporavak do ,(|;) u deklaraciji promenljivih",
						null
					);
				:};
			
Initializator ::= NUMBER | CHARACTER | BOOLEAN;

Type ::= (TypeAccess) IDENT:typeName;

MethodDeclList ::= MethodDeclList MethodDecl
				| /* epsilon */;

MethodDecl ::= (MethodDeclaration) VOID MethodName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodName ::= (MethName) IDENT;

StatementList ::= StatementList Statement
				| /* epsilon */;

Statement ::= SimpleDesignator EQUAL Expr:e SEMI
			| SimpleDesignator EQUAL NEW Type LBRACKET Expr RBRACKET SEMI
			| ArrayDesignator EQUAL Expr:e SEMI
			| error SEMI:l
			{:
				parser.report_error(
					"Izvrsen oporavak do ; na liniji "
					+ lleft, null
				);
			:}
			| SimpleDesignator DOUBLEPLUS SEMI
			| ArrayDesignator DOUBLEPLUS SEMI
			| SimpleDesignator DOUBLEMINUS SEMI
			| ArrayDesignator DOUBLEMINUS SEMI
			| READ LPAREN SimpleDesignator RPAREN SEMI
			| READ LPAREN ArrayDesignator RPAREN SEMI
			| (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
			| (PrintOnWith) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			| RETURN SEMI;

Expr ::= Expr Addop Term
		| MINUS Term
		| Term;

Term ::= Term:t Mulop Factor:te
		| Factor:t;

Factor ::= NUMBER
		| CHARACTER
		| BOOLEAN
		| LPAREN Expr RPAREN
		| SimpleDesignator:d
		| ArrayDesignator:d;

SimpleDesignator ::= (Ident) IDENT:name
					| (NsIdent) IDENT:namesp DOUBLECOLON IDENT:name;

ArrayDesignator ::= (ArrIdent) IDENT:name LBRACKET Expr RBRACKET
				| (NsArrIdent) IDENT:namesp DOUBLECOLON IDENT:name LBRACKET Expr RBRACKET;

Mulop ::= MUL | DIV | PERCENT;

Addop ::= PLUS | MINUS;